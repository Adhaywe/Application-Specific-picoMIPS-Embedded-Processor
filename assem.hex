// Affine Transformation program
// n = 8 bits, Isize = 16+n = 24 bits
// format: 6b opcode, 5b %d, 5b %s, 8b immediate or address
// 
// HEX /////////// BINARY  ///////////////////// ASSEMBLER /////////

182000    // 24'b0001_1000_0010_0000_0000_0000   IO1  Wait for SW[8] to become 1
682000    // 24'b0110_1000_0010_0000_0000_0000   LDI %1; Receive the first input, x1
382000    // 24'b0011_1000_0010_0000_0000_0000   IO2  Wait for SW[8] to become 0
684000    // 24'b0110_1000_0100_0000_0000_0000   LDI %2; Receive the second input, y1


286000    // 24'b0010_1000_0110_0000_0000_0000   ADDI %3, %0, 0; Clear reg 3
086100    // 24'b0000_1000_0110_0001_0000_0000   ADD %3, %1 ; Put x1 input in reg3
288000    // 24'b0010_1000_1000_0000_0000_0000   ADDI %4, %0, 0; Clear reg 4
088200    // 24'b0000_1000_1000_0010_0000_0000   ADD %4, %2 ; Put y1 input in reg4

0C2160    // 24'b0000_1100_0010_0001_0110_0000   MULTI %1, ;(x1*0.75) 
0C4240    // 24'b0000_1100_0100_0010_0100_0000   MULTI %2, ;(y1*0.5)
0C63C0    // 24'b0000_1100_0110_0011_1100_0000   MULTI %3, ;(x1*-0.5)
0C8460    // 24'b0000_1100_1000_0100_0110_0000   MULTI %4, ;(y1*0.75)

084100    // 24'b0000_1000_0100_0001_0000_0000   ADD %2, %1 ; (x1*0.75) + (y1*0.5) %1 = %1 + %2
088300    // 24'b0000_1000_1000_0011_0000_0000   ADD %4, %3 ; (x1*-0.5) + (y1*0.75) %3 = %3 + %4

182000    // 24'b0001_1000_0010_0000_0000_0000   IO1  Wait for SW[8] to become 1
284214    // 24'b0010_1000_0100_0010_0001_0100   ADDI %2, %0, 20 ;((x1*0.75) + (y1*0.5)) + (20)
284200    // 24'b0010_1000_0100_0010_0000_0000   ADDI %2, %2, 0 ;
284200    // 24'b0010_1000_0100_0010_0000_0000   ADDI %2, %2, 0 ;
284200    // 24'b0010_1000_0100_0010_0000_0000   ADDI %2, %2, 0 ;
284200    // 24'b0010_1000_0100_0010_0000_0000   ADDI %2, %2, 0 ;
284200    // 24'b0010_1000_0100_0010_0000_0000   ADDI %2, %2, 0 ;


382000    // 24'b0011_1000_0010_0000_0000_0000   IO2  Wait for SW[8] to become 0
2884EC    // 24'b0010_1000_1000_0100_1110_1100   ADDI %4, %0, -20 ;((x1*-0.5) + (y1*0.75)) + (-20)
288400    // 24'b0010_1000_1000_0100_0000_0000   ADDI %4, %4, 0 ;
288400    // 24'b0010_1000_1000_0100_0000_0000   ADDI %4, %4, 0 ;
288400    // 24'b0010_1000_1000_0100_0000_0000   ADDI %4, %4, 0 ;
288400    // 24'b0010_1000_1000_0100_0000_0000   ADDI %4, %4, 0 ;
288400    // 24'b0010_1000_1000_0100_0000_0000   ADDI %4, %4, 0 ;

140000    // 24'b0001_0100_0000_0000_0000_0000   J 00
 
 


